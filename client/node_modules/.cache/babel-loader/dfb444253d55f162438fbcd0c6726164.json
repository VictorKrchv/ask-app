{"ast":null,"code":"import { questionsAPI } from \"../Api/api\";\nconst SET_QUESTIONS_DATA = 'SET_QUESTIONS_DATA';\nlet initialState = {\n  questions: [{\n    title: \"title\",\n    author: 'author',\n    text: 'text',\n    id: '',\n    likes: '10',\n    comments: '4',\n    date: new Date(2020, 2, 16, 14, 20, 1)\n  }, {\n    title: \"title\",\n    author: 'author',\n    text: 'text',\n    id: '',\n    likes: '10',\n    comments: '4',\n    date: new Date(2020, 2, 16, 14, 20, 1)\n  }, {\n    title: \"title\",\n    author: 'author',\n    text: 'text',\n    id: '',\n    likes: '10',\n    comments: '4',\n    date: new Date(2020, 2, 16, 14, 20, 1)\n  }]\n};\n\nconst questionsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_QUESTIONS_DATA:\n      {\n        return { ...state,\n          questions: action.questions\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst setQuestions = questions => ({\n  type: SET_QUESTIONS_DATA,\n  questions\n});\n\nexport const getQuestions = () => async dispatch => {\n  try {\n    let response = await questionsAPI.getQuestions();\n    dispatch(setQuestions(response.data.questions));\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const postQuestion = (title, text) => async dispatch => {\n  let response = await questionsAPI.postQuestion(title, text);\n  console.log(response);\n};\nexport default questionsReducer;","map":{"version":3,"sources":["C:/Users/Viktor/WebstormProjects/askProject/client/src/Redux/questions-reducer.js"],"names":["questionsAPI","SET_QUESTIONS_DATA","initialState","questions","title","author","text","id","likes","comments","date","Date","questionsReducer","state","action","type","setQuestions","getQuestions","dispatch","response","data","e","console","log","postQuestion"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,YAA3B;AAEA,MAAMC,kBAAkB,GAAG,oBAA3B;AAGA,IAAIC,YAAY,GAAG;AACfC,EAAAA,SAAS,EAAE,CACP;AACIC,IAAAA,KAAK,EAAE,OADX;AAEIC,IAAAA,MAAM,EAAE,QAFZ;AAGIC,IAAAA,IAAI,EAAE,MAHV;AAIIC,IAAAA,EAAE,EAAE,EAJR;AAKIC,IAAAA,KAAK,EAAE,IALX;AAMIC,IAAAA,QAAQ,EAAE,GANd;AAOIC,IAAAA,IAAI,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB,EAAsB,EAAtB,EAA0B,EAA1B,EAA8B,CAA9B;AAPV,GADO,EAUN;AACGP,IAAAA,KAAK,EAAE,OADV;AAEGC,IAAAA,MAAM,EAAE,QAFX;AAGGC,IAAAA,IAAI,EAAE,MAHT;AAIGC,IAAAA,EAAE,EAAE,EAJP;AAKGC,IAAAA,KAAK,EAAE,IALV;AAMGC,IAAAA,QAAQ,EAAE,GANb;AAOGC,IAAAA,IAAI,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB,EAAsB,EAAtB,EAA0B,EAA1B,EAA8B,CAA9B;AAPT,GAVM,EAmBN;AACGP,IAAAA,KAAK,EAAE,OADV;AAEGC,IAAAA,MAAM,EAAE,QAFX;AAGGC,IAAAA,IAAI,EAAE,MAHT;AAIGC,IAAAA,EAAE,EAAE,EAJP;AAKGC,IAAAA,KAAK,EAAE,IALV;AAMGC,IAAAA,QAAQ,EAAE,GANb;AAOGC,IAAAA,IAAI,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB,EAAsB,EAAtB,EAA0B,EAA1B,EAA8B,CAA9B;AAPT,GAnBM;AADI,CAAnB;;AAkCA,MAAMC,gBAAgB,GAAG,CAACC,KAAK,GAAGX,YAAT,EAAuBY,MAAvB,KAAkC;AACvD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKd,kBAAL;AAAyB;AACtB,eAAO,EACH,GAAGY,KADA;AAEHV,UAAAA,SAAS,EAAEW,MAAM,CAACX;AAFf,SAAP;AAIF;;AACD;AAAS,aAAOU,KAAP;AAPb;AASH,CAVD;;AAeA,MAAMG,YAAY,GAAIb,SAAD,KAAgB;AACjCY,EAAAA,IAAI,EAAEd,kBAD2B;AACPE,EAAAA;AADO,CAAhB,CAArB;;AAIA,OAAO,MAAMc,YAAY,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAClD,MAAI;AACA,QAAIC,QAAQ,GAAG,MAAMnB,YAAY,CAACiB,YAAb,EAArB;AAEAC,IAAAA,QAAQ,CAACF,YAAY,CAACG,QAAQ,CAACC,IAAT,CAAcjB,SAAf,CAAb,CAAR;AACH,GAJD,CAIC,OAAOkB,CAAP,EAAU;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACH;AACJ,CARM;AAUP,OAAO,MAAMG,YAAY,GAAG,CAACpB,KAAD,EAAQE,IAAR,KAAiB,MAAOY,QAAP,IAAoB;AAC7D,MAAIC,QAAQ,GAAG,MAAMnB,YAAY,CAACwB,YAAb,CAA0BpB,KAA1B,EAAiCE,IAAjC,CAArB;AACAgB,EAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACH,CAHM;AAMP,eAAeP,gBAAf","sourcesContent":["import {questionsAPI} from \"../Api/api\";\r\n\r\nconst SET_QUESTIONS_DATA = 'SET_QUESTIONS_DATA'\r\n\r\n\r\nlet initialState = {\r\n    questions: [\r\n        {\r\n            title: \"title\",\r\n            author: 'author',\r\n            text: 'text',\r\n            id: '',\r\n            likes: '10',\r\n            comments: '4',\r\n            date: new Date(2020, 2, 16, 14, 20, 1)\r\n        },\r\n         {\r\n            title: \"title\",\r\n            author: 'author',\r\n            text: 'text',\r\n            id: '',\r\n            likes: '10',\r\n            comments: '4',\r\n            date: new Date(2020, 2, 16, 14, 20, 1)\r\n        },\r\n         {\r\n            title: \"title\",\r\n            author: 'author',\r\n            text: 'text',\r\n            id: '',\r\n            likes: '10',\r\n            comments: '4',\r\n            date: new Date(2020, 2, 16, 14, 20, 1)\r\n        },\r\n\r\n    ]\r\n}\r\n\r\n\r\nconst questionsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_QUESTIONS_DATA: {\r\n           return {\r\n               ...state,\r\n               questions: action.questions\r\n           }\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nconst setQuestions = (questions) => ({\r\n    type: SET_QUESTIONS_DATA, questions\r\n})\r\n\r\nexport const getQuestions = () => async (dispatch) => {\r\n    try {\r\n        let response = await questionsAPI.getQuestions()\r\n        \r\n        dispatch(setQuestions(response.data.questions))\r\n    }catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const postQuestion = (title, text) => async (dispatch) => {\r\n    let response = await questionsAPI.postQuestion(title, text)\r\n    console.log(response)\r\n}\r\n\r\n\r\nexport default questionsReducer;"]},"metadata":{},"sourceType":"module"}