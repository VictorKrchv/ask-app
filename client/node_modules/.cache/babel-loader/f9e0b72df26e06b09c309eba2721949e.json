{"ast":null,"code":"import { questionsAPI } from \"../Api/api\";\nconst SET_QUESTION_DATA = \"SET_QUESTION_DATA\";\nconst SET_ANSWERS = \"SET_ANSWERS\";\nlet initialState = {\n  question: {\n    title: null,\n    text: null,\n    likes: null,\n    author: null,\n    date: null\n  },\n  answers: [{\n    author: \"author\",\n    date: new Date(2020, 2, 16, 14, 20, 1),\n    likes: 10,\n    text: \"Lorem fsgdfsg dfg dfg fdg fdg fdg fdg fdgfdgfdgfd\"\n  }]\n};\n\nconst questionReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_QUESTION_DATA:\n      {\n        return { ...state,\n          question: { ...action.payload\n          }\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst setQuestionData = (title, text, likes, author, date) => ({\n  type: SET_QUESTION_DATA,\n  payload: {\n    title,\n    text,\n    likes,\n    author,\n    date\n  }\n});\n\nconst setAnswers = answers => ({\n  type: SET_ANSWERS,\n  answers\n});\n\nexport const getQuestionData = id => async dispatch => {\n  try {\n    let response = await questionsAPI.getQuestion(id);\n    const {\n      title,\n      text,\n      likes,\n      author,\n      date\n    } = response.data;\n    console.log(title, text, likes, author.email, date);\n    dispatch(setQuestionData(title, text, likes, author.email, date));\n  } catch (e) {\n    dispatch(setQuestionData(null, null, null, null, null));\n    console.log(e);\n  }\n};\nexport default questionReducer;","map":{"version":3,"sources":["C:/Users/Viktor/WebstormProjects/askProject/client/src/Redux/question-reducer.js"],"names":["questionsAPI","SET_QUESTION_DATA","SET_ANSWERS","initialState","question","title","text","likes","author","date","answers","Date","questionReducer","state","action","type","payload","setQuestionData","setAnswers","getQuestionData","id","dispatch","response","getQuestion","data","console","log","email","e"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,YAA3B;AAEA,MAAMC,iBAAiB,GAAG,mBAA1B;AACA,MAAMC,WAAW,GAAG,aAApB;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,KAAK,EAAE,IADD;AAENC,IAAAA,IAAI,EAAE,IAFA;AAGNC,IAAAA,KAAK,EAAE,IAHD;AAINC,IAAAA,MAAM,EAAE,IAJF;AAKNC,IAAAA,IAAI,EAAE;AALA,GADK;AAQfC,EAAAA,OAAO,EAAE,CACL;AACIF,IAAAA,MAAM,EAAE,QADZ;AAEIC,IAAAA,IAAI,EAAE,IAAIE,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB,EAAsB,EAAtB,EAA0B,EAA1B,EAA8B,CAA9B,CAFV;AAGIJ,IAAAA,KAAK,EAAE,EAHX;AAIID,IAAAA,IAAI,EAAE;AAJV,GADK;AARM,CAAnB;;AAmBA,MAAMM,eAAe,GAAG,CAACC,KAAK,GAAGV,YAAT,EAAuBW,MAAvB,KAAkC;AACtD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKd,iBAAL;AAAwB;AACpB,eAAO,EACH,GAAGY,KADA;AAEHT,UAAAA,QAAQ,EAAE,EAAC,GAAGU,MAAM,CAACE;AAAX;AAFP,SAAP;AAIH;;AACD;AAAS,aAAOH,KAAP;AAPb;AASH,CAVD;;AAYA,MAAMI,eAAe,GAAG,CAACZ,KAAD,EAAQC,IAAR,EAAcC,KAAd,EAAqBC,MAArB,EAA6BC,IAA7B,MAAuC;AAC3DM,EAAAA,IAAI,EAAEd,iBADqD;AAClCe,EAAAA,OAAO,EAAE;AAACX,IAAAA,KAAD;AAAQC,IAAAA,IAAR;AAAcC,IAAAA,KAAd;AAAqBC,IAAAA,MAArB;AAA6BC,IAAAA;AAA7B;AADyB,CAAvC,CAAxB;;AAIA,MAAMS,UAAU,GAAIR,OAAD,KAAc;AAC7BK,EAAAA,IAAI,EAAEb,WADuB;AACVQ,EAAAA;AADU,CAAd,CAAnB;;AAKA,OAAO,MAAMS,eAAe,GAAIC,EAAD,IAAQ,MAAOC,QAAP,IAAoB;AACvD,MAAI;AACA,QAAIC,QAAQ,GAAG,MAAMtB,YAAY,CAACuB,WAAb,CAAyBH,EAAzB,CAArB;AACA,UAAM;AAACf,MAAAA,KAAD;AAAQC,MAAAA,IAAR;AAAcC,MAAAA,KAAd;AAAqBC,MAAAA,MAArB;AAA6BC,MAAAA;AAA7B,QAAqCa,QAAQ,CAACE,IAApD;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYrB,KAAZ,EAAmBC,IAAnB,EAAyBC,KAAzB,EAAgCC,MAAM,CAACmB,KAAvC,EAA8ClB,IAA9C;AACAY,IAAAA,QAAQ,CAACJ,eAAe,CAACZ,KAAD,EAAQC,IAAR,EAAcC,KAAd,EAAqBC,MAAM,CAACmB,KAA5B,EAAmClB,IAAnC,CAAhB,CAAR;AACH,GALD,CAKC,OAAOmB,CAAP,EAAU;AACPP,IAAAA,QAAQ,CAACJ,eAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,CAAhB,CAAR;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAYE,CAAZ;AACH;AACJ,CAVM;AAeP,eAAehB,eAAf","sourcesContent":["import {questionsAPI} from \"../Api/api\";\r\n\r\nconst SET_QUESTION_DATA = \"SET_QUESTION_DATA\"\r\nconst SET_ANSWERS = \"SET_ANSWERS\"\r\n\r\nlet initialState = {\r\n    question: {\r\n        title: null,\r\n        text: null,\r\n        likes: null,\r\n        author: null,\r\n        date: null,\r\n    },\r\n    answers: [\r\n        {\r\n            author: \"author\",\r\n            date: new Date(2020, 2, 16, 14, 20, 1),\r\n            likes: 10,\r\n            text: \"Lorem fsgdfsg dfg dfg fdg fdg fdg fdg fdgfdgfdgfd\"\r\n        },\r\n    ]\r\n}\r\n\r\n\r\nconst questionReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_QUESTION_DATA: {\r\n            return {\r\n                ...state,\r\n                question: {...action.payload}\r\n            }\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nconst setQuestionData = (title, text, likes, author, date) => ({\r\n    type: SET_QUESTION_DATA, payload: {title, text, likes, author, date}\r\n})\r\n\r\nconst setAnswers = (answers) => ({\r\n    type: SET_ANSWERS, answers\r\n})\r\n\r\n\r\nexport const getQuestionData = (id) => async (dispatch) => {\r\n    try {\r\n        let response = await questionsAPI.getQuestion(id)\r\n        const {title, text, likes, author, date} = response.data\r\n        console.log(title, text, likes, author.email, date)\r\n        dispatch(setQuestionData(title, text, likes, author.email, date))\r\n    }catch (e) {\r\n        dispatch(setQuestionData(null, null, null, null, null))\r\n        console.log(e)\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default questionReducer;"]},"metadata":{},"sourceType":"module"}