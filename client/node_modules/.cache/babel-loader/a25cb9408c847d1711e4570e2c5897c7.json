{"ast":null,"code":"import { questionsAPI } from \"../Api/api\";\nconst SET_QUESTIONS_DATA = 'SET_QUESTIONS_DATA';\nconst DELETE_QUESTION = \"DELETE_QUESTION\";\nlet initialState = {\n  questions: [// {\n    //     title: \"title\",\n    //     author: 'author',\n    //     text: 'text',\n    //     id: '',\n    //     likes: '10',\n    //     comments: '4',\n    //     date: new Date(2020, 2, 16, 14, 20, 1)\n  ]\n};\n\nconst questionsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_QUESTIONS_DATA:\n      {\n        return { ...state,\n          questions: action.questions\n        };\n      }\n\n    case DELETE_QUESTION:\n      {\n        return { ...state,\n          questions: state.questions.filter(question => {\n            return question.id !== action.id;\n          })\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst setQuestions = questions => ({\n  type: SET_QUESTIONS_DATA,\n  questions\n});\n\nconst deleteQuestion = id => ({\n  type: DELETE_QUESTION,\n  id\n});\n\nexport const getQuestions = () => async dispatch => {\n  try {\n    let response = await questionsAPI.getQuestions();\n    dispatch(setQuestions(response.data.questions));\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const postQuestion = (title, text) => async dispatch => {\n  let response = await questionsAPI.postQuestion(title, text);\n  console.log(response);\n};\nexport const fetchDeleteQuestion = id => async dispatch => {\n  try {\n    let response = await questionsAPI.deleteQuestion(id);\n\n    if (response.status === 200) {\n      dispatch(deleteQuestion(id));\n    }\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport default questionsReducer;","map":{"version":3,"sources":["C:/Users/Viktor/WebstormProjects/askProject/client/src/Redux/questions-reducer.js"],"names":["questionsAPI","SET_QUESTIONS_DATA","DELETE_QUESTION","initialState","questions","questionsReducer","state","action","type","filter","question","id","setQuestions","deleteQuestion","getQuestions","dispatch","response","data","e","console","log","postQuestion","title","text","fetchDeleteQuestion","status"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,YAA3B;AAEA,MAAMC,kBAAkB,GAAG,oBAA3B;AACA,MAAMC,eAAe,GAAG,iBAAxB;AAGA,IAAIC,YAAY,GAAG;AACfC,EAAAA,SAAS,EAAE,CACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARO;AADI,CAAnB;;AAcA,MAAMC,gBAAgB,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AACvD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,kBAAL;AAAyB;AACrB,eAAO,EACH,GAAGK,KADA;AAEHF,UAAAA,SAAS,EAAEG,MAAM,CAACH;AAFf,SAAP;AAIH;;AACD,SAAKF,eAAL;AAAsB;AAClB,eAAO,EACH,GAAGI,KADA;AAEHF,UAAAA,SAAS,EAAEE,KAAK,CAACF,SAAN,CAAgBK,MAAhB,CAAuBC,QAAQ,IAAI;AAC1C,mBAAOA,QAAQ,CAACC,EAAT,KAAgBJ,MAAM,CAACI,EAA9B;AACH,WAFU;AAFR,SAAP;AAMH;;AACD;AACI,aAAOL,KAAP;AAhBR;AAkBH,CAnBD;;AAsBA,MAAMM,YAAY,GAAIR,SAAD,KAAgB;AACjCI,EAAAA,IAAI,EAAEP,kBAD2B;AACPG,EAAAA;AADO,CAAhB,CAArB;;AAIA,MAAMS,cAAc,GAAIF,EAAD,KAAS;AAC5BH,EAAAA,IAAI,EAAEN,eADsB;AACLS,EAAAA;AADK,CAAT,CAAvB;;AAKA,OAAO,MAAMG,YAAY,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAClD,MAAI;AACA,QAAIC,QAAQ,GAAG,MAAMhB,YAAY,CAACc,YAAb,EAArB;AAEAC,IAAAA,QAAQ,CAACH,YAAY,CAACI,QAAQ,CAACC,IAAT,CAAcb,SAAf,CAAb,CAAR;AACH,GAJD,CAIE,OAAOc,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACH;AACJ,CARM;AAUP,OAAO,MAAMG,YAAY,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAiB,MAAOR,QAAP,IAAoB;AAC7D,MAAIC,QAAQ,GAAG,MAAMhB,YAAY,CAACqB,YAAb,CAA0BC,KAA1B,EAAiCC,IAAjC,CAArB;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACH,CAHM;AAKP,OAAO,MAAMQ,mBAAmB,GAAIb,EAAD,IAAQ,MAAOI,QAAP,IAAoB;AAC3D,MAAI;AACA,QAAIC,QAAQ,GAAG,MAAMhB,YAAY,CAACa,cAAb,CAA4BF,EAA5B,CAArB;;AACA,QAAIK,QAAQ,CAACS,MAAT,KAAoB,GAAxB,EAA6B;AACzBV,MAAAA,QAAQ,CAACF,cAAc,CAACF,EAAD,CAAf,CAAR;AACH;AACJ,GALD,CAKE,OAAOO,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACH;AAEJ,CAVM;AAaP,eAAeb,gBAAf","sourcesContent":["import {questionsAPI} from \"../Api/api\";\r\n\r\nconst SET_QUESTIONS_DATA = 'SET_QUESTIONS_DATA'\r\nconst DELETE_QUESTION = \"DELETE_QUESTION\"\r\n\r\n\r\nlet initialState = {\r\n    questions: [\r\n        // {\r\n        //     title: \"title\",\r\n        //     author: 'author',\r\n        //     text: 'text',\r\n        //     id: '',\r\n        //     likes: '10',\r\n        //     comments: '4',\r\n        //     date: new Date(2020, 2, 16, 14, 20, 1)\r\n    ]\r\n}\r\n\r\n\r\nconst questionsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_QUESTIONS_DATA: {\r\n            return {\r\n                ...state,\r\n                questions: action.questions\r\n            }\r\n        }\r\n        case DELETE_QUESTION: {\r\n            return {\r\n                ...state,\r\n                questions: state.questions.filter(question => {\r\n                    return question.id !== action.id\r\n                })\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nconst setQuestions = (questions) => ({\r\n    type: SET_QUESTIONS_DATA, questions\r\n})\r\n\r\nconst deleteQuestion = (id) => ({\r\n    type: DELETE_QUESTION, id\r\n})\r\n\r\n\r\nexport const getQuestions = () => async (dispatch) => {\r\n    try {\r\n        let response = await questionsAPI.getQuestions()\r\n\r\n        dispatch(setQuestions(response.data.questions))\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const postQuestion = (title, text) => async (dispatch) => {\r\n    let response = await questionsAPI.postQuestion(title, text)\r\n    console.log(response)\r\n}\r\n\r\nexport const fetchDeleteQuestion = (id) => async (dispatch) => {\r\n    try {\r\n        let response = await questionsAPI.deleteQuestion(id)\r\n        if (response.status === 200) {\r\n            dispatch(deleteQuestion(id))\r\n        }\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default questionsReducer;"]},"metadata":{},"sourceType":"module"}